# -*- coding: utf-8 -*-
"""Full Pipeline+ Prompt Changes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YlBZqHOji2wmL2i00NwCV7emTQMbz-HG
"""

!pip install transformers accelerate bitsandbytes

from google.colab import drive
drive.mount('/content/drive')

import json
# add local file when running
json_file_path = '/content/drive/My Drive/CS546_Group/first_100_WiC.json'

# Read the JSON file
with open(json_file_path, 'r') as json_file:
    data = json.load(json_file)

print(data)

from transformers import AutoModelForCausalLM, AutoTokenizer
import torch
model_name = "meta-llama/Llama-2-7b-chat-hf"
prompt = "Tell me about gravity"
access_token = "" # My personal access token to llama2 weights. Please don't misuse



model = AutoModelForCausalLM.from_pretrained(model_name, device_map="auto", load_in_4bit=True, bnb_4bit_compute_dtype=torch.float16, use_auth_token=access_token)
tokenizer = AutoTokenizer.from_pretrained(model_name, use_fast=True, use_auth_token=access_token)
model_inputs = tokenizer(prompt, return_tensors="pt").to("cuda:0")

def genAndPrint(prompt):
  model_inputs = tokenizer(prompt, return_tensors="pt").to("cuda:0")
  output = model.generate(**model_inputs, max_new_tokens=100,  do_sample=True)
  # print(tokenizer.decode(output[0], skip_special_tokens=True))
  return tokenizer.decode(output[0], skip_special_tokens=True)

def generateDifferentSenseExamplesPrompt(sentence1, target):
  res = f"""Consider the following sentence. Sentence 1: {sentence1}
  Generate 5 diverse sentences containing the word {target} where {target} has a different word sense.
  Sentence 3: """
#   res = f"""Consider the following pair of sentences. Sentence 1: {sentence1} Sentence 2: {sentence2}
#   Generate pairs of sentences containing the word *{target}* where *{target}* has a different word sense in both sentences. Do not explain the word senses.
#   Sentence 3: """
  return res

def generateSameSenseExamplesPrompt(sentence1, target):
  res = f"""Consider the following sentence. Sentence 1: {sentence1}
  Generate 5 diverse sentences with different sentence structures containing the word {target} where {target} has the same word sense in both sentences. Do not explain the word senses.
  Sentence 2: """
#   res = f"""Consider the following pair of sentences. Sentence 1: {sentence1} Sentence 2: {sentence2}
#   Generate pairs of sentences containing the word *{target}* where *{target}* has the same word sense in both sentences. Do not explain the word senses.
#   Sentence 3: """
  return res

def parse_sentences(text):
    sentences = []
    lines = text.split('\n')

    for line in lines:
        parts = line.split(':', 1)
        if len(parts) == 2 and parts[1].strip() != "" and parts[0].find("Sentence") != -1:
            sentence = parts[1].strip()
            if not (sentence.endswith('.') or sentence.endswith('!') or sentence.endswith('?')):
                sentence += '.'
            sentences.append(sentence)

    return sentences[1:]

def combinedPrompt(s1, s2, target, examplesSameSense, examplesSameSense2, examplesDifferentSense, examplesDifferentSense2):
  s = f"""The task is to label whether the word {target} is being used with the same word sense. Consider the following examples:
Sentence 1: {examplesSameSense[0]} Sentence 2: {s1}
Word sense: same
Sentence 1: {s2} Sentence 2: {examplesSameSense2[0]}
Word sense: same,
Sentence 1: {examplesDifferentSense[2]} Sentence 2: {s1}
Word sense: different
Sentence 1: {s1} Sentence 2: {examplesSameSense[1]}
Word sense: same
Sentence 1: {examplesSameSense[2]} Sentence 2: {s1}
Word sense: same
Sentence 1: {s1} Sentence 2: {examplesDifferentSense[0]}
Word sense: different
Sentence 1: {s1} Sentence 2: {examplesSameSense[3]}
Word sense: same
Sentence 1: {s2} Sentence 2: {examplesSameSense2[1]}
Word sense: same
Sentence 1: {examplesSameSense2[2]} Sentence 2: {s2}
Word sense: same
Sentence 1: {s2} Sentence 2: {examplesSameSense2[3]}
Word sense: same
Sentence 1: {examplesDifferentSense[1]} Sentence 2: {s1}
Word sense: different
Sentence 1: {s1}. Sentence 2: {s2}.
Word sense:"""
  return s

import random

def generate_and_print_sentences(s1, s2, target, examplesSameSense, examplesSameSense2, examplesDifferentSense, examplesDifferentSense2, verbose=True):
    final_sentence = f"The task is to label whether the word {target} is being used with the same word sense. Consider the following examples:\n"
    combinedExamples = examplesSameSense + examplesDifferentSense
    random.shuffle(combinedExamples)
    for item_s1 in combinedExamples:
        if item_s1 in examplesDifferentSense:
            sentence_order = [item_s1, s1] if random.choice([True, False]) else [s1, item_s1]
            final_sentence += f"Sentence 1: {sentence_order[0]} Sentence 2: {sentence_order[1]}\nWord sense: different\n"
        else:
            sentence_order = [item_s1, s1] if random.choice([True, False]) else [s1, item_s1]
            final_sentence += f"Sentence 1: {sentence_order[0]} Sentence 2: {sentence_order[1]}\nWord sense: same\n"

    for item_s2 in combinedExamples:
        if item_s2 in examplesDifferentSense2:
            sentence_order = [item_s2, s2] if random.choice([True, False]) else [s2, item_s2]
            final_sentence += f"Sentence 1: {sentence_order[0]} Sentence 2: {sentence_order[1]}\nWord sense: different\n"
        else:
            sentence_order = [item_s2, s2] if random.choice([True, False]) else [s2, item_s2]
            final_sentence += f"Sentence 1: {sentence_order[0]} Sentence 2: {sentence_order[1]}\nWord sense: same\n"
    final_sentence += f"Sentence 1: {s1}. Sentence 2: {s2}.\nWord sense: "
    return final_sentence

def extraction(text):
  sentences = []
  lines = text.split('\n')

  for line in lines:
      parts = line.split(':', 1)
      if len(parts) == 2 and parts[1].strip() != "" and parts[0].find("Word sense") != -1:
          sentence = parts[1].strip()
          sentences.append(sentence)

  return sentences[-1]

def matches(text, gt):
    if gt == 1:
        if 'same' in text:
            return True
        else:
            return False
    elif gt == 0:
        if 'different' in text:
            return True
        else:
            return False
    else:
        print('!!!!!!!!!!!!!!!!!ERROR in matches, not same or different. Text:', text)

from enum import Enum

# class syntax
class VERBOSITY(Enum):
    NONE = 0
    SOME = 1
    FULL = 2
LOG_LEVEL = VERBOSITY.FULL

def log(text, level = 0):
    match level:
        case 0: # This message is critical, always display
            print(text)
        case 1: # Include this message unless logging is set to "none"
            if LOG_LEVEL == VERBOSITY.FULL or LOG_LEVEL == VERBOSITY.SOME:
                print(text)
        case 2: # Include this message unless logging is set to "none"
            if LOG_LEVEL == VERBOSITY.FULL:
                print(text)

# Testing Extraction
t = """The task is to label whether the word beat is being used with the same word sense. Consider the following examples:
Sentence 1: The team beat the opposing side by a goal. Sentence 2: We beat the competition
Word sense: same
Sentence 1: Agassi beat Becker in the tennis championship Sentence 2: The band beat the drums with excitement.
Word sense: same,
Sentence 1: The music beat was too fast. Sentence 2: We beat the competition
Word sense: different
Sentence 1: We beat the competition Sentence 2: The band beat the crowd with their music.
Word sense: same
Sentence 1: The chef beat the eggs before adding them to the batter. Sentence 2: We beat the competition
Word sense: same
Sentence 1: We beat the competition Sentence 2: The new employee beat the company's records.
Word sense: different
Sentence 1: We beat the competition Sentence 2: The runners beat the course record by seconds.
Word sense: same
Sentence 1: Agassi beat Becker in the tennis championship Sentence 2: The storm beat down on the cit.
Word sense: same
Sentence 1: The team beat the opposing team in the game. Sentence 2: Agassi beat Becker in the tennis championship
Word sense: same
Sentence 1: Agassi beat Becker in the tennis championship Sentence 2: The chef beat the eggs with a fork
Word sense: same
Sentence 1: The team beat the deadline. Sentence 2: We beat the competition
Word sense: different
Sentence 1: We beat the competition. Sentence 2: Agassi beat Becker in the tennis championship.
Word sense: same

Based on the above examples, it is clear that the word "beat" can have different word senses, and it is important to consider the context in which the word is being used in order to determine the intended meaning.

In general, the word "beat" can have several different word senses, including:

To defeat or conquer: In this sense, "beat" is often used to describe a victory or success in a competition"""

print(extraction(t))
print(matches(extraction(t), 1))

# iterate through each example:
LOG_LEVEL = VERBOSITY.FULL # Must be set for logging function calls to work


num_correct = 0
num_tested = 0

for instance in data[:100]:
    log(instance, 2)
    s1 = instance[2]
    s2 = instance[3]
    target = instance[0]
    gt = int(instance[-1])

    # call gensamesenseexamplesprompt on s1 and on s2 and then combine them into 1 list
    examplesSameSense = parse_sentences(genAndPrint(generateSameSenseExamplesPrompt(s1, target)))
    # print(f'exampelsSameSense: {examplesSameSense}')
    examplesSameSense2 = parse_sentences(genAndPrint(generateSameSenseExamplesPrompt(s2, target)))
    # print(f'exampelsSameSense2: {examplesSameSense2}')
    examplesDifferentSense = parse_sentences(genAndPrint(generateDifferentSenseExamplesPrompt(s1, target)))

    examplesDifferentSense2 = parse_sentences(genAndPrint(generateDifferentSenseExamplesPrompt(s2, target)))

    # run combined prompt
    combined_prompt = generate_and_print_sentences(s1=s1, s2=s2, target=target, examplesSameSense=examplesSameSense, examplesSameSense2=examplesSameSense2, examplesDifferentSense=examplesDifferentSense, examplesDifferentSense2=examplesDifferentSense2)
    log(f'Combined_prompt: {combined_prompt}', 2)
    final_res = genAndPrint(combined_prompt)

    extracted_ans = extraction(final_res)
    is_correct_string = 'Correct' if matches(extracted_ans, gt) else 'Wrong'
    # ans = 1 if extraction(final_res) else 0
    output_as_number = 1 if 'same' in extracted_ans else 0
    log(f'Output: {extracted_ans}', 2)
    log(f'Sentence 1: {s1} Sentence 2: {s2} GT: {gt}, Our Output: {output_as_number} --- {is_correct_string}', 1)

    # Increment number of items tested, and num correct if we got it right
    num_tested += 1
    if matches(extracted_ans, gt):
        num_correct += 1
    # if ans == gt: num_correct += 1

    log(f'***Running Accuracy:  {num_correct} / {num_tested} : {num_correct / num_tested}', 0)



log(f'First 100 Accuracy: {num_correct} / {num_tested} : {num_correct / num_tested}', 0)

"""Compute baseline accuracy"""

def baselinePrompt(s1, s2, target):
    res = f"""The task is to label whether the word {target} is being used with the same word sense in both sentences. Answer same or different.
    Sentence 1: {s1} Sentence 2: {s2}
    Word sense:"""
    return res

LOG_LEVEL = VERBOSITY.FULL
num_tested_baseline = 0
num_correct_baseline = 0


for instance in data[:1000]:
    log(instance, 2)
    s1 = instance[2]
    s2 = instance[3]
    target = instance[0]
    gt = int(instance[-1])

    # call gensamesenseexamplesprompt on s1 and on s2 and then combine them into 1 list
    base_prompt = baselinePrompt(s1, s2, target)
    log(f'Baseline prompt: {base_prompt}', 2)
    final_res = genAndPrint(combined_prompt)

    extracted_ans = extraction(final_res)
    is_correct_string = 'Correct' if matches(extracted_ans, gt) else 'Wrong'
    baseline_output_as_number = 1 if 'same' in extracted_ans else 0
    log(f'Output: {extracted_ans}', 2)
    # ans = 1 if extraction(final_res) else 0
    log(f'Sentence 1: {s1} Sentence 2: {s2} GT: {gt}, Our Output: {baseline_output_as_number} --- {is_correct_string}', 1)

    # Increment number of items tested, and num correct if we got it right
    num_tested_baseline += 1
    if matches(extracted_ans, gt):
        num_correct_baseline += 1

    log(f'***Running Accuracy:  {num_correct_baseline} / {num_tested_baseline} : {num_correct_baseline / num_tested_baseline}', 0)



log(f'First 100 baseline Accuracy: {num_correct_baseline} / {num_tested_baseline} : {num_correct_baseline / num_tested_baseline}', 0)

# Find ground trouth correctness stats
gt_num_same = 0
gt_num_different = 0
print('len:', len(data))
for instance in data:
    if instance[-1] == 1:
        gt_num_same += 1
    elif instance[-1] == 0:
        gt_num_different += 1
    else:
        print('GT label is not 0 or 1')

print('Ground truth same count:', gt_num_same)
print('Ground truth different count:', gt_num_different)